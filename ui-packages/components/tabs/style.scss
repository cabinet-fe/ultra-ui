@use '@ui/styles/mixins' as m;
@use '@ui/styles/functions' as fn;
@use '@ui/styles/vars';

@include m.b(tabs) {
  display: flex;

  @each $position in top, left, right, bottom {
    @include m.e($position) {
      @if $position ==top {
        flex-direction: column;
      }

      @else if $position ==bottom {
        flex-direction: column-reverse;
      }

      @else if $position ==left {
        flex-direction: row;
      }

      @else if $position ==right {
        flex-direction: row-reverse;
      }
    }
  }

  @include m.e(header) {
    display: flex;
    justify-content: space-around;
    position: relative;
    background-color: fn.use-var(color, primary-light-9);
    border-radius: fn.use-var(radius, default);
    padding: fn.use-var(gap, small);

    @each $position in top, left, right, bottom {
      &--#{$position} {
        @if $position ==left {
          flex-direction: column;
          border-right: 2px solid fn.use-var(border-color);
          margin-right: 10px;
        }

        @else if $position ==right {
          flex-direction: column;
          border-left: 2px solid fn.use-var(border-color);
          margin-left: 10px;
        }

        @else if $position ==bottom {
          border-bottom: 2px solid fn.use-var(border-color);
          margin-top: 10px;
        }

        @else {
          border-bottom: 2px solid fn.use-var(border-color);
          margin-bottom: 10px;
        }
      }
    }

    &--label {
      flex: 1;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      padding: fn.use-var(gap, large);
      margin: 1px;
      font-size: fn.use-var(font-size, title);
      font-weight: bold;
      color: fn.use-var(text-color, main);
      user-select: none;
      border-radius: fn.use-var(radius, default);
      animation: fadeOutAnimation 1s forwards;
      box-shadow: 1px 1px 4px fn.use-var(color, primary-light-7);

      @keyframes fadeOutAnimation {
        from {
          background-color: fn.use-var(bg-color, top);
        }

        to {
          background-color: fn.use-var(color, primary-light-9);
        }
      }

      @include m.is('active') {
        color: fn.use-var(text-color, title);
        box-shadow: -1px -1px 4px fn.use-var(color, primary-light-7);
        // background-color: fn.use-var(bg-color, top);
        animation: fadeInAnimation 1s forwards;

        @keyframes fadeInAnimation {
          from {
            background-color: fn.use-var(color, primary-light-9);
          }

          to {
            background-color: fn.use-var(bg-color, top);
          }
        }
      }

      .is-close,
      .is-close--placeholder {
        width: 16px;
        height: 16px;
        line-height: 13px;
        border-radius: 50px;
        display: flex;
        justify-content: center;
        align-items: center;
      }

      .is-close:hover {
        background-color: fn.use-var(color, primary);
        color: #fff;
      }
    }

    &--label:hover {
      color: fn.use-var(color, primary);
    }

    &--line {
      background-color: fn.use-var(color, primary);
      transition: transform 0.3s ease-in, width 0.3s ease-out;
      position: absolute;
      width: 50px;
      height: 2px;
      left: 0px;
      bottom: -2px;

      @each $position in top, left, right, bottom {
        @include m.is(#{$position}) {
          @if $position ==left {
            width: 2px !important;
            height: 50px;
            top: 0px;
            right: -2px;
          }

          @else if $position ==right {
            width: 2px !important;
            height: 50px;
            top: 0px;
            left: -2px;
          }
        }
      }
    }
  }

  @include m.e(content) {
    width: 100%;
    border: fn.use-var(border);
    border-radius: fn.use-var(radius, default);
  }
}