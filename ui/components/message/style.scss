@use '../../styles/mixins' as m;
@use '../../styles/functions' as fn;
@use '../../styles/vars';
@use 'sass:map';

// 方便拼接
$root-name: message;

@include m.b($root-name) {
  display: flex;
  padding: 0.75em;
  line-height: 1;
  align-items: center;
  margin-bottom: fn.use-var(gap, large);

  @include m.e(container) {
    flex-direction: column;
    position: fixed;
    top: 0;
    padding: fn.use-var(gap, default) 0;
    left: 50%;
    transform: translate(-50%, 0);
    @include m.flex;
  }

  @include m.e(content) {
    max-width: 400px;
    word-wrap: break-word;
  }

  @include m.e(close) {
    cursor: pointer;
  }

  @include m.size using ($size) {
    border-radius: fn.use-var(radius, $size);
    font-size: fn.use-var('font-size', title, $size);

    @include m.bem($root-name, icon) {
      margin-right: fn.use-var(gap, $size);
    }

    @include m.bem($root-name, close) {
      margin-left: fn.use-var(gap, $size);
    }
  }

  @each $type, $_ in vars.$color-types {
    @if ($type == 'default') {
      @include m.m(color-#{$type}) {
        background-color: fn.use-var(color, $type);
        color: fn.use-var(text-color, main);
        box-shadow: 0 0 4px 0px fn.use-var(color, $type);
      }
    } @else {
      @include m.m(color-#{$type}) {
        background-color: fn.use-var(color, $type, 'light-9');
        color: fn.use-var(color, $type);
        box-shadow: 0 0 4px 0px fn.use-var(color, $type, 'light-5');
      }
    }
  }
}

.#{$root-name}-fade-enter-from,
.#{$root-name}-fade-leave-to {
  opacity: 0;
  transform: translate3d(0, -100%, 0);
}

.#{$root-name}-fade-enter-active,
.#{$root-name}-fade-leave-active {
  transition:
    opacity 0.3s,
    transform 0.3s;
}
