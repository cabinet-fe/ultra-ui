@use '../../styles/mixins' as m;
@use '../../styles/functions' as fn;
@use '../../styles/vars';
@use 'sass:map';

$root-name: tabs;
$position-types: (
  top,
  right,
  bottom,
  left
);

@include m.b($root-name) {
  display: flex;

  @include m.size using ($size) {
    @include m.bem($root-name, header) {
      padding: 2px;
      display: flex;

      &--label {
        border-radius: map.get(vars.$border-radius, $size);
        padding: 0 map.get(vars.$gap, $size);
        font-size: map.get(vars.$font-size-main, $size);
        height: fn.use-var(form-component-height, $size);
        line-height: fn.use-var(form-component-height, $size);

        .is-close,
        .is-close--placeholder {
          width: map.get(vars.$font-size-main, $size) * 1.5;
          height: map.get(vars.$font-size-main, $size) * 1.5;
        }
      }
    }
  }

  @each $position in $position-types {
    @include m.e($position) {
      @if $position ==top {
        flex-direction: column;
      }

      @else if $position ==bottom {
        flex-direction: column-reverse;
      }

      @else if $position ==left {
        flex-direction: row;
      }

      @else if $position ==right {
        flex-direction: row-reverse;
      }
    }
  }

  @include m.e(header) {
    position: relative;
    background-color: fn.use-var(color, primary-light-9);

    @each $position in $position-types {
      &--#{$position} {
        @if $position ==left {
          flex-direction: column;
        }

        @else if $position ==right {
          flex-direction: column;
        }
      }
    }

    &--label {
      display: flex;
      align-items: center;
      justify-content: space-between;
      cursor: pointer;
      margin: 1px;
      font-size: fn.use-var(font-size-title, default);
      font-weight: bold;
      color: fn.use-var(text-color, main);
      user-select: none;
      animation: fadeOutAnimation 1s forwards;
      border: 1px solid fn.use-var(bg-color, top);

      @keyframes fadeOutAnimation {
        from {
          background-color: fn.use-var(bg-color, top);
        }

        to {
          background-color: fn.use-var(color, primary-light-9);
        }
      }

      @include m.is('active') {
        animation: fadeInAnimation 0.25s forwards;
        color: fn.use-var(color, primary);

        @keyframes fadeInAnimation {
          from {
            background-color: fn.use-var(color, primary-light-9);
          }

          to {
            background-color: fn.use-var(bg-color, top);
          }
        }
      }

      @include m.is('disabled') {
        cursor: not-allowed;
        color: fn.use-var(text, color, disabled);
      }

      .is-close,
      .is-close--placeholder {
        padding: 2px;
        border-radius: 50%;
        display: inline-flex;
        justify-content: center;
        align-items: center;
      }

      .is-close:hover {
        background-color: fn.use-var(color, primary-light-7);
      }
    }

    &--label:hover {
      color: fn.use-var(color, primary);
      border-style: dashed;

      @include m.is(disabled) {
        color: fn.use-var(text, color, disabled);
        border-style: solid;
      }
    }

  }

  @include m.e(content) {
    width: 100%;
    border: fn.use-var(border);
    border-radius: fn.use-var(radius, default);
  }
}