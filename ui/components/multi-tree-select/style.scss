@use '../../styles/mixins' as m;
@use '../../styles/functions' as fn;
@use '../../styles/vars';

// 方便拼接
$root-name: multi-tree-select;

@include m.b($root-name) {
  width: 100%;
  line-height: 1;
  box-shadow: inset 0 0 1px 1px fn.use-var(border, color);
  transition: box-shadow 0.25s ease;
  overflow: hidden;
  cursor: pointer;
  @include m.flex($display: inline-flex);

  &:hover {
    box-shadow: inset 0 0 1px 1px fn.use-var(color, primary);
  }

  @include m.size using ($size) {
    min-height: fn.use-var(form-component-height, $size);
    border-radius: fn.use-var(radius, $size);
    padding: calc(
        (fn.use-var(form-component-height, $size) - fn.use-var(tag, $size)) / 2
      )
      calc(fn.use-var(gap, $size) / 2);

    @include m.bem($root-name, clear) {
      font-size: fn.use-var(font-size-main, $size);
    }

    @include m.bem($root-name, tags) {
      gap: calc(
        (fn.use-var(form-component-height, $size) - fn.use-var(tag, $size)) / 2
      );
    }
  }

  @include m.is(disabled) {
    cursor: not-allowed;
    background-color: fn.use-var(color, disabled);
    box-shadow: inset 0 0 1px 1px fn.use-var(border, color);

    @include m.bem($root-name, arrow) {
      color: fn.use-var(text-color, disabled);
    }

    @include m.bem(tag) {
      border: fn.use-var(border);
    }
  }

  @include m.e(placeholder) {
    flex-shrink: 0;
    flex-grow: 1;
    user-select: none;
    color: fn.use-var(text-color, placeholder);
  }

  @include m.e(filter) {
    margin-bottom: 4px;
  }

  @include m.e(tags) {
    flex-grow: 1;
    @include m.flex($justify: flex-start, $align: center, $wrap: wrap);
  }

  @include m.e(readonly-tags) {
    padding-left: 0;
    padding-right: 0;
  }

  @include m.e(arrow, clear) {
    min-width: 20px;
    color: fn.use-var(text-color, main);
  }

  @include m.e(content-header) {
    padding: 4px 12px;
    border-bottom: fn.use-var(border);
    border-radius: 0;
    @include m.flex($justify: space-between);
  }

  @include m.e(panel) {
    @include m.size using ($size) {
      @include m.bem($root-name, content-filter) {
        padding: calc(fn.use-var(gap, $size) / 2) fn.use-var(gap, $size);
      }
      @include m.bem($root-name, content-header) {
        padding: calc(fn.use-var(gap, $size) / 2)
          calc(fn.use-var(gap, $size) * 2);
        border-bottom: fn.use-var(border);
      }

      @include m.bem($root-name, content-tree) {
        padding: calc(fn.use-var(gap, $size) / 2) fn.use-var(gap, $size);
      }

      @include m.bem(tree, node-content) {
        padding: 0 fn.use-var(gap, $size);
      }
    }
  }

  @include m.e(content-tree) {
    max-height: 272px;
  }
}
