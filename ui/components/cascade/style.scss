@use '../../styles/mixins' as m;
@use '../../styles/functions' as fn;
@use '../../styles/vars';

// 方便拼接
$root-name: cascade;
$dropdown-name: dropdown;

@include m.b($root-name) {
  width: 100%;

  @include m.e(content) {
    display: flex;
    border-top: fn.use-var(border);
  }

  @include m.e(options) {
    min-width: 160px;
    max-height: 180px;
    box-sizing: border-box;
    flex-shrink: 0;
    flex-grow: 1;
    border-right: fn.use-var(border);

    @include m.is(disabled) {
      cursor: not-allowed;
      color: fn.use-var(text-color, disabled);
    }

    &:last-child {
      border-right: none;
    }
  }

  @include m.e(option) {
    cursor: pointer;
    user-select: none;
    @include m.flex($display: flex, $align: center, $justify: space-between);

    &:hover {
      background-color: fn.use-var(color, primary, light-9);
    }

    @include m.is(selected) {
      background-color: fn.use-var(color, primary, light-3);
      color: fn.use-var(text-color, white);
      padding: 0 2px;
    }

    @include m.is(checked) {
      color: fn.use-var(color, primary);
      font-weight: 600;
    }

    @include m.is(disabled) {
      cursor: not-allowed;
      color: fn.use-var(text-color, disabled);
    }
  
  }

  @include m.e(options-item) {
    max-height: 180px;
    position: absolute;
    background: fn.use-var(bg, color-top);
    border: fn.use-var(border);
    border-radius: fn.use-var(radius, default);
    top: 0;
    left: 0;
  }

  @include m.e(ripple) {
    background-color: fn.use-var(color, primary, light-7);
    opacity: 0.5;
  }

  @include m.e(panel) {
    @include m.size using ($size) {
      @include m.bem($root-name, content-filter) {
        padding: calc(fn.use-var(gap, $size) / 2) fn.use-var(gap, $size);
      }
    }
  }

  @include m.is(disabled) {
    @include m.bem($root-name, arrow) {
      cursor: not-allowed;
      color: fn.use-var(text-color, disabled);
    }
  }

  @include m.e(tags) {
    flex-grow: 1;
    @include m.flex($justify: flex-start, $align: center, $wrap: wrap);
  }

  @include m.size using ($size) {
    @include m.bem($root-name, option) {
      padding: fn.use-var(gap, $size);
    }

    @include m.bem($root-name, tags) {
      gap: calc(
        (fn.use-var(form-component-height, $size) - fn.use-var(tag, $size)) / 2
      );
    }

    @include m.bem($root-name, multi) {
      min-height: fn.use-var(form-component-height, $size);
      border-radius: fn.use-var(radius, $size);
      padding: calc(
          (fn.use-var(form-component-height, $size) - fn.use-var(tag, $size)) /
            2
        )
        calc(fn.use-var(gap, $size) / 2);
      width: 100%;
      line-height: 1;
      box-shadow: inset 0 0 1px 1px fn.use-var(border, color);
      transition: box-shadow 0.25s ease;
      overflow: hidden;
      cursor: pointer;
      @include m.flex($display: inline-flex);

      &:hover {
        box-shadow: inset 0 0 1px 1px fn.use-var(color, primary);
      }
    }

    @include m.bem($root-name, clear) {
      font-size: fn.use-var(font-size-main, $size);
    }
  }

  @include m.e(empty) {
    text-align: center;
  }

  @include m.e(multi) {
    width: 100%;
    line-height: 1;
    box-shadow: inset 0 0 1px 1px fn.use-var(border, color);
    transition: box-shadow 0.25s ease;
    overflow: hidden;
    cursor: pointer;
    @include m.flex($display: inline-flex);

    &:hover {
      box-shadow: inset 0 0 1px 1px fn.use-var(color, primary);
    }
  }

  @include m.e(placeholder) {
    flex-shrink: 0;
    flex-grow: 1;
    user-select: none;
    color: fn.use-var(text-color, placeholder);
  }

  @include m.e(arrow, clear) {
    min-width: 20px;
    color: fn.use-var(text-color, main);
  }
}
