@use '../../styles/mixins' as m;
@use '../../styles/functions' as fn;
@use '../../styles/vars';

// 方便拼接
$root-name: cascade;
$dropdown-name: dropdown;


@include m.b($root-name) {
  width: 100%;
  position: relative;

  @include m.e(content) {
    display: flex;
  }

  @include m.e(options) {
    max-height: 180px;
    border-left: fn.use-var(border);
  }

  @include m.e(options-item) {
    max-height: 180px;
    position: absolute;
    background: fn.use-var(bg, color-top);
    border: fn.use-var(border);
    border-radius: fn.use-var(radius, default);
    top: 0;
    left: 0;
  }

  @include m.size using ($size) {

    @include m.bem($root-name, content-filter) {
      padding: calc(fn.use-var(gap, $size) / 2) fn.use-var(gap, $size);
    }

    @include m.bem($root-name, option) {
      padding: fn.use-var(gap, $size);
    }

    @include m.bem($root-name, tags) {
      gap: calc((fn.use-var(form-component-height, $size) - fn.use-var(tag, $size)) / 2);
    }
  }

  @include m.is(disabled) {

    @include m.bem($root-name, arrow) {
      cursor: not-allowed;
      color: fn.use-var(text-color, disabled);
    }
  }

  @include m.e(tags) {
    @include m.flex($justify: flex-start, $align: center, $wrap: wrap);
    flex-grow: 1;
  }

  @include m.e(option) {
    cursor: pointer;
    margin: 2px 0;
    user-select: none;
    @include m.flex($display: flex, $align: center, $justify: space-between);

    &:hover {
      background-color: fn.use-var(color, primary, light-9);
    }

    @include m.is(selected) {
      background-color: fn.use-var(color, primary, light-3);
      color: fn.use-var(text-color, white);
    }
  }
}