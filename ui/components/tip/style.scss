@use '../../styles/mixins' as m;
@use '../../styles/functions' as fn;
@use '../../styles/vars';

$root-name: tip;

@include m.b($root-name) {
  width: max-content;

  @include m.e(content) {
    position: absolute;
    border-radius: fn.use-var(radius, default);
    color: fn.use-var(text-color, main);
    background: fn.use-var(bg, color-top);
    box-shadow: fn.use-var(shadow);
    overflow: hidden;
  }

  @include m.size using ($size) {
    font-size: fn.use-var(font-size, main, $size);
    padding: fn.use-var(gap, $size);
  }
}

@function getClasses($common) {
  $classes: null;

  @each $position in top, bottom, left, right {
    @if ($classes == null) {
      $classes: '.#{$root-name}-#{$position}-#{$common}';
    } @else {
      $classes: $classes + ',' + '.#{$root-name}-#{$position}-#{$common}';
    }
  }

  @return $classes;
}

#{getClasses(enter-active)},
#{getClasses(leave-active)} {
  transition-property: opacity, transform;
  transition-duration: 0.2s;
}

#{getClasses(enter-active)} {
  transition-timing-function: cubic-bezier(0.05, 1.55, 0.38, 1.33);
}

#{getClasses(leave-active)} {
  transition-timing-function: cubic-bezier(0.64, -0.85, 0.83, 0.56);
}

#{getClasses(enter-from)},
#{getClasses(leave-to)} {
  opacity: 0;
}

$translate: 20px;

.#{$root-name}-top-enter-from,
.#{$root-name}-top-leave-to {
  transform: translateY($translate);
}
.#{$root-name}-bottom-enter-from,
.#{$root-name}-bottom-leave-to {
  transform: translateY(-$translate);
}
.#{$root-name}-left-enter-from,
.#{$root-name}-left-leave-to {
  transform: translateX($translate);
}
.#{$root-name}-right-enter-from,
.#{$root-name}-right-leave-to {
  transform: translateX(-$translate);
}
